provider:
  iamRoleStatements:
    - Effect: Allow
      Action: 'dynamodb:*'
      Resource: !GetAtt MonitoringTasksTable.Arn

  environment:
    MonitoringTasksTable: !Ref MonitoringTasksTable
    MonitoringAlertsTopicExportName: '${self:service}-${self:provider.stage}-MonitoringAlertsTopic'

functions:
  ReconcileMonitoringTaskStacksApi:
    handler: src/monitoringTasks/lambda.reconcileRestApi
    events:
      - http:
          path: /reconcile/taskStacks
          method: any

  ReconcileMonitoringTaskStacksSchedule:
    handler: src/monitoringTasks/lambda.reconcileScheduleWorker
    events:
      - schedule: rate(15 minutes)

resources:
  Resources:
    MonitoringTasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    MonitoringAlertsTopic:
      Type: AWS::SNS::Topic

  Outputs:
    MonitoringAlertsTopic:
      Description: The monitoring alerts output in case anything goes wrong.
      Value: !Ref MonitoringAlertsTopic
      Export:
        Name: '${self:service}-${self:provider.stage}-MonitoringAlertsTopic'